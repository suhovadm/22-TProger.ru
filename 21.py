# Задача 21.
# Нужно проверить, все ли числа в последовательности уникальны.

# Заводим функцию are_numbers_unique, которая принимает один аргумент - sequence.
# Этот аргумент будет нашей последовательностью - список, кортеж и т.д. содержащей числа.
def are_numbers_unique(sequence):
    # Проверка чисел на уникальность.

    # set(sequence) - создаём множество из элементов sequence. Множество - это коллекция, которая
    # автоматически удаляет дубликаты. Например, если sequence [1, 2, 2, 3] то set(sequence) будет {1, 2, 3}.

    # len(sequence) - это функция, которая возвращает количество элементов в оригинальной последовательности.

    # len(set(sequence)) - возвращает количество уникальных элементов в последовательности, так как дубли
    # были удалены при создании множества.

    # len(sequence) == len(set(sequence)) - это выражение сравнивает длину оригинальной последовательности
    # с длиной множества. Если они равны, это означает, что все элементы в последовательности уникальны,
    # т.е. дубликатов нет. Если они не равны, это значит, что есть хотя бы один дубликат.

    return len(sequence) == len(set(sequence))

# Создаём список numbers, который содержит уникальные числа.
numbers = [1, 2, 3, 4, 5] # True

print('Задача 21, решение:\n')

# Вызываем функцию are_numbers_unique с этим списком в качестве аргумента и выводим результат на экран.
# Поскольку все числа в списке уникальны, функция вернёт True, и на экране мы увидим True.
print('Первый список:', are_numbers_unique(numbers))

# Создаём ещё один список numbers, в котором содержится дубликат числа 2.
numbers = [1, 2, 2, 3, 4, 5] # False

# Снова вызываем функцию are_numbers_unique с этим списком в качестве аргумента и выводим результат на экран.
# Поскольку в списке есть дубликат, функция вернёт False, и на экране мы увидим False.
print('Второй список:',are_numbers_unique(numbers))